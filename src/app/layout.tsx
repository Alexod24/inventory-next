// src/app/layout.tsx
// ESTE ES UN SERVER COMPONENT POR DEFECTO. NO LLEVA "use client";

import { Outfit } from "next/font/google";
import "./globals.css";

import { SidebarProvider } from "@/context/SidebarContext";
import { ThemeProvider } from "@/context/ThemeContext";
import { UserProvider, UserProfile } from "@/context/UserContext"; // Importamos UserProfile

// Importa el cliente de Supabase para el LADO DEL SERVIDOR
import { createServerSupabaseClient } from "@/lib/supabaseServerClient";
// Importa el proveedor de sesión de Supabase (este SÍ es un Client Component)
import SupabaseSessionProvider from "@/components/SupabaseSessionProvider";
// Importa el componente Client que aplicará las clases de tema al <body>
import ThemeBodyApplicator from "@/components/ThemeBodyApplicator";

const outfit = Outfit({
  subsets: ["latin"],
});

// Metadatos de la aplicación
export const metadata = {
  title: "Inventory Next App",
  description: "Generated by create next app",
};

// La función RootLayout DEBE ser async para poder usar 'await'
export default async function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  // 1. Obtener la sesión de Supabase en el LADO DEL SERVIDOR
  const supabase = await createServerSupabaseClient();

  // --- LOGS DE DEPURACIÓN CRÍTICOS ---
  console.log(
    "RootLayout: Objeto 'supabase' después de createServerSupabaseClient:",
    supabase
  );
  console.log(
    "RootLayout: Propiedad 'supabase.auth' después de createServerSupabaseClient:",
    supabase?.auth
  );
  // --- FIN LOGS DE DEPURACIÓN ---

  const {
    data: { session },
  } = await supabase.auth.getSession(); // Aquí es donde ocurre el error si 'supabase.auth' es undefined

  let userDataForContext: UserProfile | null = null; // Inicializa con null

  if (session?.user) {
    // Si hay una sesión activa, intenta obtener el rol del usuario de la tabla 'usuarios'
    console.log(
      "RootLayout: Sesión activa, intentando obtener rol para user ID:",
      session.user.id
    );
    const { data: profile, error: profileError } = await supabase
      .from("usuarios")
      .select("nombre, rol") // Selecciona el nombre y el rol
      .eq("id", session.user.id)
      .single();

    if (profileError) {
      console.error(
        "RootLayout: Error al obtener perfil de usuario:",
        profileError.message
      );
      // Si hay un error al obtener el perfil, aún podemos pasar la información básica de Auth
      userDataForContext = {
        id: session.user.id,
        email: session.user.email,
        nombre: null, // No se pudo obtener el nombre
        rol: null, // No se pudo obtener el rol
      };
    } else if (profile) {
      userDataForContext = {
        id: session.user.id,
        email: session.user.email,
        nombre: profile.nombre, // Pasa el nombre obtenido del perfil
        rol: profile.rol, // Pasa el rol obtenido del perfil
      };
      console.log(
        "RootLayout: Perfil de usuario cargado. Rol:",
        profile.rol,
        "Nombre:",
        profile.nombre
      );
    } else {
      console.warn(
        "RootLayout: No se encontró perfil en la tabla 'usuarios' para el ID:",
        session.user.id
      );
      // Si no se encuentra el perfil, el usuario sigue logueado en Auth, pero sin rol específico de la app.
      userDataForContext = {
        id: session.user.id,
        email: session.user.email,
        nombre: null, // No hay nombre de perfil
        rol: null, // No hay rol de perfil
      };
    }
  } else {
    console.log("RootLayout: No hay sesión activa.");
  }

  return (
    <html lang="en">
      {/* El body aquí tendrá solo las clases estáticas (como la fuente).
          Las clases dinámicas del tema ('bg-gray-900'/'bg-white')
          se aplicarán en el cliente mediante ThemeBodyApplicator. */}
      <body className={outfit.className} suppressHydrationWarning>
        {/* Proveedores de contexto (estos son Client Components).
            Es importante que envuelvan todo el árbol que necesite sus contextos. */}
        <ThemeProvider>
          <SidebarProvider>
            {/* <--- CORRECCIÓN CLAVE AQUÍ: Pasa userDataForContext como initialUser */}
            <UserProvider initialUser={userDataForContext}>
              {/* ThemeBodyApplicator es un Client Component que manipula el <body>.
                  Debe ser renderizado DENTRO de ThemeProvider para tener acceso al contexto del tema.
                  Este componente es la solución para aplicar las clases de tema dinámicas al body
                  cuando el RootLayout es un Server Component. */}
              <ThemeBodyApplicator />

              {/* SupabaseSessionProvider es también un Client Component.
                  Recibe la sesión obtenida del servidor y la pasa al cliente.
                  Envuelve a los 'children' principales de tu aplicación. */}
              <SupabaseSessionProvider initialSession={session}>
                {children}{" "}
                {/* Tus páginas y componentes principales se renderizan aquí */}
              </SupabaseSessionProvider>
            </UserProvider>
          </SidebarProvider>
        </ThemeProvider>
      </body>
    </html>
  );
}
